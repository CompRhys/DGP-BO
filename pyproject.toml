[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dgp-bo"
version = "0.1.0"
description = "DGP Bayesian Optimization"
authors = [
    {name = "sk md ahnaf akif alvi", email = "ahnafalvi@tamu.edu"},
    {name = "Rhys Goodall", email = "rgoodall@radical-ai.com"}
]
readme = "README.md"
requires-python = ">=3.1"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
  "numpy>=2,<3",
  "pandas",
  "gpytorch",
  "scipy",
  "torch",
  "joblib",
]

[tool.hatch.build.targets.wheel]
packages = ["src/dgp_bo"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:warnings"

[tool.mypy]
no_implicit_optional = false

[tool.ruff]
line-length = 90
target-version = "py310"
output-format = "concise"

[tool.ruff.lint]
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
#   "D",    # pydocstyle
  "E",    # pycodestyle error
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "PD",   # pandas-vet
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PYI",  # flakes8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "SLOT", # flake8-slots
  "TCH",  # flake8-type-checking
  "TID",  # tidy imports
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle warning
  "YTT",  # flake8-2020
]
ignore = [
  "B023",   # Function definition does not bind loop variable
  "C408",   # Unnecessary dict call - rewrite as a literal
#   "D100",   # Missing docstring in public module
#   "D104",   # Missing docstring in public package
#   "D105",   # Missing docstring in magic method
#   "D205",   # 1 blank line required between summary line and description
  "E731",   # Do not assign a lambda expression, use a def
  "ISC001",
  "PD901",  # pandas-df-variable-name
  "PLR",    # pylint refactor
  "PT006",  # pytest-parametrize-names-wrong-type
]
pydocstyle.convention = "google"

[tool.ruff.lint.per-file-ignores]
"src/dgp_bo/dirichlet.py" = ["E741"]
"src/dgp_bo/utils.py" = ["E741"]
